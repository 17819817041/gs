{"remainingRequest":"E:\\gs\\Petavi\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\gs\\Petavi\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\gs\\Petavi\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gs\\Petavi\\src\\view\\vetSetting\\vetSetting.vue?vue&type=template&id=649054be&scoped=true&","dependencies":[{"path":"E:\\gs\\Petavi\\src\\view\\vetSetting\\vetSetting.vue","mtime":1623144409882},{"path":"E:\\gs\\Petavi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gs\\Petavi\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\gs\\Petavi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gs\\Petavi\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\gs\\Petavi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gs\\Petavi\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\gs\\Petavi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gs\\Petavi\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}